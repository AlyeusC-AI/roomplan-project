generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  password          String
  firstName         String
  lastName          String
  phone             String?
  referralCode      String?   @unique
  referralSource    String?
  acceptReminders   Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  isEmailVerified   Boolean   @default(false)
  verificationToken String?
  resetToken        String?
  resetTokenExpiry  DateTime?
  supabaseId        String?   @unique
  avatar            String?

  // Organization relationships
  organizationMemberships OrganizationMember[]
  calendarEvents          CalendarEvent[]
  calendarEventReminders  CalendarEventReminder[]

  // Add direct many-to-many relationship with Project
  projects Project[] @relation("ProjectMembers")
  comments Comment[]
}

model Organization {
  id                      String    @id @default(uuid())
  name                    String
  phoneNumber             String?
  address                 String?
  formattedAddress        String?
  city                    String?
  region                  String?
  postalCode              String?
  country                 String?
  faxNumber               String?
  size                    Int?      @default(10)
  isDeleted               Boolean   @default(false)
  logo                    String?
  lat                     Float?
  lng                     Float?
  subscriptionId          String?
  subscriptionPlan        String?
  customerId              String?
  maxUsersForSubscription Int?      @default(0)
  freeTrialEndsAt         DateTime?
  subscriptionStatus      String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  supabaseId              String?   @unique

  // Relationships
  members         OrganizationMember[]
  projectStatuses ProjectStatus[]
  equipments      Equipment[]
  calendarEvents  CalendarEvent[]
  projects        Project[]
}

enum MemberStatus {
  PENDING
  ACTIVE
  REJECTED
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  PROJECT_MANAGER
  ACCOUNT_MANAGER
  CONTRACTOR
}

model OrganizationMember {
  id             String       @id @default(uuid())
  organizationId String
  userId         String
  role           Role         @default(MEMBER) // Can be: owner, admin, member
  status         MemberStatus @default(PENDING) // Can be: pending, active, rejected
  invitedAt      DateTime     @default(now())
  joinedAt       DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@unique([organizationId, userId])
}

model ProjectStatus {
  id             String       @id @default(uuid())
  label          String
  description    String?
  color          String?
  isDefault      Boolean      @default(false)
  isDeleted      Boolean      @default(false)
  order          Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  supabaseId     String?      @unique
  projects       Project[]

  @@index([organizationId])
}

enum LossType {
  FIRE
  WATER
  WIND
  HAIL
  MOLD
  OTHER
}

model Equipment {
  id               String             @id @default(uuid())
  name             String
  description      String?
  quantity         Int
  image            String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  organizationId   String
  organization     Organization       @relation(fields: [organizationId], references: [id])
  EquipmentProject EquipmentProject[]

  @@index([organizationId])
}

model Project {
  id                  String             @id @default(uuid())
  name                String
  supabaseId          String?            @unique
  description         String?
  adjusterEmail       String?
  adjusterPhoneNumber String?
  clientEmail         String?
  clientPhoneNumber   String?
  clientName          String?
  adjusterName        String?
  location            String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  equipmentProject    EquipmentProject[]
  calendarEvents      CalendarEvent[]

  // Add direct many-to-many relationship with User
  members User[] @relation("ProjectMembers")

  closedAt         DateTime?
  assignmentNumber String?

  companyName String?
  managerName String?

  insuranceCompanyName String?
  insuranceClaimId     String?
  lossType             LossType?
  catCode              String?
  humidity             String?

  temperature  String?
  wind         String?
  lat          String?
  lng          String?
  forecast     String?
  claimSummary String?

  roofSegments String[]
  roofSpecs    String?
  rcvValue     String?
  actualValue  String?
  status       ProjectStatus? @relation(fields: [statusId], references: [id])
  statusId     String?
  mainImage    String?
  policyNumber String?
  dateOfLoss   DateTime?

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  rooms          Room[]
  images         Image[]
}

model Room {
  id        String   @id @default(uuid())
  name      String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  images    Image[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
}

model Image {
  id           String    @id @default(uuid())
  url          String
  roomId       String?
  room         Room?     @relation(fields: [roomId], references: [id])
  comments     Comment[]
  showInReport Boolean   @default(false)
  order        Int       @default(0)
  projectId    String
  project      Project   @relation(fields: [projectId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([roomId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  imageId   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image     Image    @relation(fields: [imageId], references: [id])

  @@index([imageId])
  @@index([userId])
}

model EquipmentProject {
  id          String    @id @default(uuid())
  equipmentId String
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  quantity    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([equipmentId])
  @@index([projectId])
}

model CalendarEvent {
  id          String   @id @default(uuid())
  subject     String
  supabaseId  String?  @unique
  description String?
  date        DateTime
  start       DateTime
  end         DateTime

  remindClient        Boolean  @default(false)
  remindProjectOwners Boolean  @default(false)
  reminderTime        String?
  isDeleted           Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relationships
  projectId      String?
  project        Project?                @relation(fields: [projectId], references: [id])
  organizationId String
  organization   Organization            @relation(fields: [organizationId], references: [id])
  usersToRemind  User[]
  reminders      CalendarEventReminder[]

  @@index([projectId])
  @@index([organizationId])
}

model CalendarEventReminder {
  id             String         @id @default(uuid())
  supabaseId     String?        @unique
  date           DateTime
  reminderTarget ReminderTarget // client, projectCreator, allAssigned
  sendEmail      Boolean        @default(false)
  sendText       Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  textSentAt     DateTime?
  emailSentAt    DateTime?

  // Relationships
  calendarEventId String
  calendarEvent   CalendarEvent @relation(fields: [calendarEventId], references: [id])
  userId          String?
  user            User?         @relation(fields: [userId], references: [id])

  @@index([calendarEventId])
  @@index([userId])
}

enum ReminderTarget {
  CLIENT
  PROJECT_CREATOR
  USERS
}
