generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  password          String
  firstName         String
  lastName          String
  phone             String?
  referralCode      String?   @unique
  referralSource    String?
  acceptReminders   Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  isEmailVerified   Boolean   @default(false)
  verificationToken String?
  resetToken        String?
  resetTokenExpiry  DateTime?
  supabaseId        String?   @unique
  avatar            String?

  // Organization relationships
  organizationMemberships OrganizationMember[]
}

model Organization {
  id                      String    @id @default(uuid())
  name                    String
  phoneNumber             String?
  address                 String?
  formattedAddress        String?
  city                    String?
  region                  String?
  postalCode              String?
  country                 String?
  faxNumber               String?
  size                    Int?
  isDeleted               Boolean   @default(false)
  logo                    String?
  lat                     Float?
  lng                     Float?
  subscriptionId          String?
  subscriptionPlan        String?
  customerId              String?
  maxUsersForSubscription Int?      @default(0)
  freeTrialEndsAt         DateTime?
  subscriptionStatus      String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  supabaseId              String?   @unique

  // Relationships
  members         OrganizationMember[]
  projectStatuses ProjectStatus[]
  equipments      Equipment[]
}

enum MemberStatus {
  PENDING
  ACTIVE
  REJECTED
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  PROJECT_MANAGER
  ACCOUNT_MANAGER
  CONTRACTOR
}

model OrganizationMember {
  id             String       @id @default(uuid())
  organizationId String
  userId         String
  role           Role         @default(MEMBER) // Can be: owner, admin, member
  status         MemberStatus @default(PENDING) // Can be: pending, active, rejected
  invitedAt      DateTime     @default(now())
  joinedAt       DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@unique([organizationId, userId])
}

model ProjectStatus {
  id             String       @id @default(uuid())
  label          String
  description    String?
  color          String?
  isDefault      Boolean      @default(false)
  isDeleted      Boolean      @default(false)
  order          Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
}

model Equipment {
  id               String             @id @default(uuid())
  name             String
  description      String?
  quantity         Int
  image            String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  organizationId   String
  organization     Organization       @relation(fields: [organizationId], references: [id])
  EquipmentProject EquipmentProject[]

  @@index([organizationId])
}

model Project {
  id               String             @id @default(uuid())
  name             String
  description      String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  equipmentProject EquipmentProject[]
}

model EquipmentProject {
  id          String    @id @default(uuid())
  equipmentId String
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  quantity    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([equipmentId])
  @@index([projectId])
}
