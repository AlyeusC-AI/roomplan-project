/**
 * Automatically generated by expo-modules-autolinking.
 *
 * This autogenerated class provides a list of classes of native Expo modules,
 * but only these that are written in Swift and use the new API for creating Expo modules.
 */

import ExpoModulesCore
import RoomPlan
import EXApplication
import ExpoAsset
import ExpoClipboard
import EXConstants
import EASClient
import ExpoFileSystem
import ExpoFont
import ExpoImage
import ExpoKeepAwake
import ExpoHead
import ExpoSpeechRecognition
import ExpoStoreReview
import ExpoTrackingTransparency
import EXUpdates
#if EXPO_CONFIGURATION_DEBUG
import EXDevLauncher
import EXDevMenu
#endif

@objc(ExpoModulesProvider)
public class ExpoModulesProvider: ModulesProvider {
  public override func getModuleClasses() -> [AnyModule.Type] {
    #if EXPO_CONFIGURATION_DEBUG
    return [
      RoomPlanModule.self,
      ApplicationModule.self,
      AssetModule.self,
      ClipboardModule.self,
      ConstantsModule.self,
      EASClientModule.self,
      FileSystemModule.self,
      FontLoaderModule.self,
      ImageModule.self,
      KeepAwakeModule.self,
      ExpoHeadModule.self,
      ExpoSpeechRecognitionModule.self,
      StoreReviewModule.self,
      TrackingTransparencyModule.self,
      UpdatesModule.self,
      DevLauncherInternal.self,
      DevLauncherAuth.self,
      RNCSafeAreaProviderManager.self,
      DevMenuModule.self,
      DevMenuInternalModule.self,
      DevMenuPreferences.self,
      RNCSafeAreaProviderManager.self
    ]
    #else
    return [
      RoomPlanModule.self,
      ApplicationModule.self,
      AssetModule.self,
      ClipboardModule.self,
      ConstantsModule.self,
      EASClientModule.self,
      FileSystemModule.self,
      FontLoaderModule.self,
      ImageModule.self,
      KeepAwakeModule.self,
      ExpoHeadModule.self,
      ExpoSpeechRecognitionModule.self,
      StoreReviewModule.self,
      TrackingTransparencyModule.self,
      UpdatesModule.self
    ]
    #endif
  }

  public override func getAppDelegateSubscribers() -> [ExpoAppDelegateSubscriber.Type] {
    #if EXPO_CONFIGURATION_DEBUG
    return [
      FileSystemBackgroundSessionHandler.self,
      ExpoHeadAppDelegateSubscriber.self,
      ExpoDevLauncherAppDelegateSubscriber.self
    ]
    #else
    return [
      FileSystemBackgroundSessionHandler.self,
      ExpoHeadAppDelegateSubscriber.self
    ]
    #endif
  }

  public override func getReactDelegateHandlers() -> [ExpoReactDelegateHandlerTupleType] {
    #if EXPO_CONFIGURATION_DEBUG
    return [
      (packageName: "expo-updates", handler: ExpoUpdatesReactDelegateHandler.self),
      (packageName: "expo-dev-launcher", handler: ExpoDevLauncherReactDelegateHandler.self),
      (packageName: "expo-dev-menu", handler: ExpoDevMenuReactDelegateHandler.self)
    ]
    #else
    return [
      (packageName: "expo-updates", handler: ExpoUpdatesReactDelegateHandler.self)
    ]
    #endif
  }
}
